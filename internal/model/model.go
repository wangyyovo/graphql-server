// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"graphql-server/internal/scalar"
	"io"
	"strconv"

	"github.com/99designs/gqlgen/graphql"
)

type Shape interface {
	IsShape()
}

type Shapes interface {
	IsShapes()
}

type Circle struct {
	Radius *float64 `json:"radius"`
	Area   *float64 `json:"area"`
}

func (Circle) IsShape()  {}
func (Circle) IsShapes() {}

type Errors struct {
	Code        int    `json:"code"`
	Message     string `json:"message"`
	Description string `json:"description"`
}

type File struct {
	ID          int    `json:"id"`
	Name        string `json:"name"`
	Content     string `json:"content"`
	ContentType string `json:"contentType"`
}

type Log struct {
	Log string `json:"log"`
}

type Message struct {
	Msg string `json:"msg"`
}

type Result struct {
	Status bool      `json:"status"`
	Errors []*Errors `json:"errors"`
}

type School struct {
	ID      int      `json:"id"`
	Teacher *Teacher `json:"teacher"`
}

type Square struct {
	Edge *int     `json:"edge"`
	Area *float64 `json:"area"`
}

func (Square) IsShape()  {}
func (Square) IsShapes() {}

type Student struct {
	ID      int      `json:"id"`
	Teacher *Teacher `json:"teacher"`
	Address string   `json:"Address"`
}

type Teacher struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type Token struct {
	Value  string    `json:"value"`
	Errors []*Errors `json:"errors"`
}

type UploadFile struct {
	ID   int            `json:"id"`
	File graphql.Upload `json:"file"`
}

type User struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
	// 生日
	Genre  []*string     `json:"genre"`
	Status *scalar.YesNo `json:"status"`
	State  *bool         `json:"state"`
}

func (User) IsEntity() {}

type Role string

const (
	RoleAdmin Role = "ADMIN"
	RoleUser  Role = "USER"
)

var AllRole = []Role{
	RoleAdmin,
	RoleUser,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleUser:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
